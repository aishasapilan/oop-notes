Multithreading
    *Allow you to run multiple threads concurrently within a single process.

import threading
import time

def print_name(name, *args):
    print(name, *args)

name = "test..."

thread1 = threading.Thread(target=print_name, args=(name, 1))
thread2 = threading.Thread(target=print_name, args=(name, 1, 2))

thread1.start()
thread2.start()

thread1.join()
thread2.join()

print("Multithreading...done!")



Synchronizing threads
    *The threading module includes a simple-to-implement, Locking mechanism that allows you to synchronize threads.
    *A new lock is created by calling Lock() method, The acquire (blocking) method of the new lock object is used to force threads to run synchronously.

import threading
import time

class myThread (threading.Thread):
   def __init__(self, threadID, name, counter):
      threading.Thread.__init__(self)
      self.threadID = threadID
      self.name = name
      self.counter = counter
   def run(self):
      print ("Starting " + self.name)
      threadLock.acquire()
      print_time(self.name, self.counter, 3)
      threadLock.release()

def print_time(threadName, delay, counter):
   while counter:
      #time.sleep(delay)
      print (f"{threadName} : {time.ctime(time.time())}")
      counter -= 1

threadLock = threading.Lock()
threads = []

thread1 = myThread(1, "Thread-1", 1)
thread2 = myThread(2, "Thread-2", 2)

thread1.start()
thread2.start()

threads.append(thread1)
threads.append(thread2)

for t in threads:
    t.join()
print ("Exiting Main Thread")

